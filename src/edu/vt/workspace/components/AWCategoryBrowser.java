

/*
 * AWCategoryBrowser.java
 *
 * Created on Jun 19, 2011, 2:28:22 PM
 */
package edu.vt.workspace.components;

import edu.vt.workspace.components.utilities.AWDocumentComparator;
import edu.vt.workspace.components.utilities.FileListCellRenderer;
import edu.vt.workspace.components.utilities.LayoutManager;
import edu.vt.workspace.components.utilities.SortedListModel;
import edu.vt.workspace.data.AWController;
import edu.vt.workspace.data.AWDocument;
import edu.vt.workspace.data.FileManager;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author cpa
 */
public class AWCategoryBrowser extends AWInternalFrame {
    private HashMap<String, Vector<AWDocument>> categorizedDocs = new HashMap<String, Vector<AWDocument>>(10);
     private FileListCellRenderer cellRenderer = null;
    private AWDocumentComparator _comparator;
    
    
    /** Creates new form AWCategoryBrowser */
    public AWCategoryBrowser() {
        initComponents();
    }
    
    
    
    private void loadCategories(){
        // load a local collection of documents
        Vector<AWDocument> documents = FileManager.getInstance().getDocuments();
        String category;
        for (AWDocument document: documents){
            if (document.hasProperty("category")){
                category = document.getProperty("category");
            }else{
                category = "unknown";
            }
            try {
                categorizedDocs.get(category).add(document);
            }catch (NullPointerException npe){
                Vector<AWDocument> list = categorizedDocs.put(category, new Vector<AWDocument>(100));
                categorizedDocs.get(category).add(document);
                categorySelector.addItem(category);
            }
            
        }
    }
    
    private void initializeList(){
        
        
         _comparator = new AWDocumentComparator(AWDocumentComparator.SortType.DATE);
       
        cellRenderer = new FileListCellRenderer(fileList);
        cellRenderer.setDisplayMode(FileListCellRenderer.DisplayMode.BY_DATE);
        fileList.setCellRenderer(cellRenderer);
        fileList.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    int index = fileList.locationToIndex(me.getPoint());
                    AWDocument doc = (AWDocument) (fileList.getModel().getElementAt(index));
                   AWController.getInstance().displayFile(doc, true);
                }
            }
        });

        fileList.addKeyListener(new KeyAdapter(){

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER){
                   int[] selected =  fileList.getSelectedIndices();
                   if (selected.length > 0)
                       LayoutManager.getInstance().clearSelected();
                   for (int i = 0; i < selected.length; i++){
                       AWDocument doc = (AWDocument) (fileList.getModel().getElementAt(selected[i]));
                       AWInternalFrame frame = AWController.getInstance().displayFile(doc, false);
                       LayoutManager.getInstance().addFrameToSelection(frame);
                       
                    }
                }
            }
       });

        fileList.addListSelectionListener(new SelectionHelper());
        
        
       loadList();
    }
    
     private void fixSelections(Object[] selectedItems){
        int[] newSelections = new int[selectedItems.length];
        int k = 0;
        fileList.clearSelection();
        ListModel model = fileList.getModel();
        for (int i = 0; i < model.getSize(); i++){
            Object obj = model.getElementAt(i);
            for (int j = 0; j < selectedItems.length;j++){
                if (selectedItems[j] == obj){
                    newSelections[k++] = i;
                }

            }
        }
        fileList.setSelectedIndices(newSelections);
    }

     
     
     private void loadList(){
         String category = (String)categorySelector.getSelectedItem();
         Collections.sort(categorizedDocs.get(category), _comparator);
         fileList.setListData(categorizedDocs.get(category));
     }
    
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        categorySelector = new javax.swing.JComboBox();
        loadCategories();
        dateButton = new javax.swing.JToggleButton();
        rankButton = new javax.swing.JToggleButton();

        setTitle("Category Browser");

        jScrollPane1.setViewportView(fileList);
        initializeList();

        categorySelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categorySelectorItemStateChanged(evt);
            }
        });

        buttonGroup1.add(dateButton);
        dateButton.setText("By Date");
        dateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(rankButton);
        rankButton.setText("By Rank");
        rankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(categorySelector, 0, 360, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(dateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rankButton)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(categorySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateButton)
                    .addComponent(rankButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categorySelectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categorySelectorItemStateChanged
         loadList();
    }//GEN-LAST:event_categorySelectorItemStateChanged

    private void dateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateButtonActionPerformed
        if (cellRenderer != null)
            cellRenderer.setDisplayMode(FileListCellRenderer.DisplayMode.BY_DATE);
        _comparator.setSortType(AWDocumentComparator.SortType.DATE);
        Object[] selectedItems = fileList.getSelectedValues();
        loadList();
        fixSelections(selectedItems);
        fileList.repaint();
    }//GEN-LAST:event_dateButtonActionPerformed

    private void rankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankButtonActionPerformed
       if (cellRenderer != null)
            cellRenderer.setDisplayMode(FileListCellRenderer.DisplayMode.BY_RANK);
        _comparator.setSortType(AWDocumentComparator.SortType.RANK);
        Object[] selectedItems = fileList.getSelectedValues();
        loadList();
        fixSelections(selectedItems);
        fileList.repaint();
    }//GEN-LAST:event_rankButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox categorySelector;
    private javax.swing.JToggleButton dateButton;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton rankButton;
    // End of variables declaration//GEN-END:variables


   /**
     * A simple class to bring up the preview pane on selection events
     */
    private class SelectionHelper implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
             JList list = (JList) e.getSource();
             AWDocument doc;
             int selectedCount = 0;
             int selectedIndex = 0;

             for (int i = e.getFirstIndex(); i <= e.getLastIndex(); i++) {
                if (list.isSelectedIndex(i)) {
                    selectedCount++;
                    selectedIndex = i;
                 }
            }

             // preview text if we've only selected a single item
            if (selectedCount == 1) {
                // only one frame selected, show it
                doc = (AWDocument) (list.getModel().getElementAt(selectedIndex));
                AWPopupTextWindow.getInstance().showDocument(doc, null, AWCategoryBrowser.this);

            }else{
                 AWPopupTextWindow.getInstance().showDocument(null, null, AWCategoryBrowser.this);
            }

        }

    }

}
